public class LinkedList{
    private Node head;
    private Node tail;
    private Integer size;

    public LinkedList() {
        head = null;
        tail = null;
        size = 0;
    }

    // Node class representing elements in the linked list
    private class Node {
        Integer data;
        Node next;

        Node(Integer data) {
            this.data = data;
            this.next = null;
        }
    }

    // addToFront: Add an element to the front of the list (constant time)
    public void addToFront(Integer data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            newNode.next = head;
            head = newNode;
        }
        size++;
    }

    // removeFromFront: Remove and return the element at the front of the list (constant time)
    public Integer removeFromFront() {
        if (isEmpty()) {
            return null;
        }
        Integer removedData = head.data;
        head = head.next;
        size--;
        if (isEmpty()) {
            tail = null;
        }
        return removedData;
    }

    // size: Return the current size of the list
    public Integer size() {
        return size;
    }

    // addToTail: Add an element to the end of the list (constant time)
    public void addToTail(Integer data) {
        Node newNode = new Node(data);
        if (isEmpty()) {
            head = newNode;
            tail = newNode;
        } else {
            tail.next = newNode;
            tail = newNode;
        }
        size++;
    }

    // removeFromTail: Remove and return the last element in the list
}